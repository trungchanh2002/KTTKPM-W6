package com.example.apigateway.filter;import com.example.apigateway.util.JwtUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.gateway.filter.GatewayFilter;import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import org.springframework.web.server.ResponseStatusException;import reactor.core.publisher.Mono;@Componentpublic class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {    @Autowired    private RouteValidator validator;    @Autowired    private JwtUtil jwtUtil;    public AuthenticationFilter() {        super(Config.class);    }    @Override    public GatewayFilter apply(Config config) {        return ((exchange, chain) -> {            if (validator.isSecured.test(exchange.getRequest())) {                if (!exchange.getRequest().getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {                    return Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Missing authorization header"));                }                String authHeader = exchange.getRequest().getHeaders().get(HttpHeaders.AUTHORIZATION).get(0);                if (authHeader != null && authHeader.startsWith("Bearer ")) {                    authHeader = authHeader.substring(7);                } else {                    return Mono.error(new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid token format"));                }                try {                    jwtUtil.validateToken(authHeader);                } catch (Exception e) {                    return Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Invalid access"));                }            }            return chain.filter(exchange);        });    }    public static class Config {    }}