package com.example.apigateway.filter;import org.springframework.cloud.gateway.filter.GatewayFilter;import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import org.springframework.web.server.ResponseStatusException;import reactor.core.publisher.Mono;import java.util.Set;@Componentpublic class RoleAuthorizationFilter extends AbstractGatewayFilterFactory<RoleAuthorizationFilter.Config> {    public RoleAuthorizationFilter() {        super(Config.class);    }    @Override    public GatewayFilter apply(Config config) {        return (exchange, chain) -> {            if (config.getAllowedRoles() != null && !config.getAllowedRoles().isEmpty()) {                Set<String> userRoles = getUserRolesFromToken(exchange.getRequest().getHeaders().getFirst("Authorization"));                if (!userRoles.contains("ADMIN")) { // Chỉ cho phép người dùng có vai trò ADMIN truy cập                    return Mono.error(new ResponseStatusException(HttpStatus.FORBIDDEN, "Access denied"));                }            }            return chain.filter(exchange);        };    }    private Set<String> getUserRolesFromToken(String token) {        return Set.of("ADMIN", "USER");    }    public static class Config {        private String allowedRoles;        public String getAllowedRoles() {            return allowedRoles;        }        public void setAllowedRoles(String allowedRoles) {            this.allowedRoles = allowedRoles;        }    }}